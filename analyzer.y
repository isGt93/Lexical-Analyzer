%{
	#include<stdio.h>
	#include<stdlib.h>
	int yylex();
	void yyerror(const char *s);
%}

%token START
%token END
%token S_COMMENT1
%token S_COMMENT2
%token MULTILINE
%token S_VARIABLE
%token S_UNDERSCORE
%token S_SEMICOLON
%token O_CONCATENATION
%token O_CONCATENATIONA
%token W_RESERVED
%token O_ARITHMETIC
%token O_COMPARISON
%token O_ASSIGNMENT
%token O_INC_DEC
%token O_LOGICAL
%token O_LOGICAL2
%token T_INTEGER
%token T_FLOAT
%token T_STRING
%token IDENTIFIER
%token S_QUOTES
%token T_BOOLEAN
%token T_NULL
%token ECHO
%token EQUALS
%token GLOBAL_STATIC
%token S_COMA
%token C_PRINT
%token W_CONSTANT
%token W_CONSTANT2
%token S_OPARENTESIS
%token S_CPARENTESIS
%token W_IF
%token W_ELSEIF
%token W_ELSE
%token S_OBRACKETS
%token S_CBRACKETS
%token S_OSBRACKETS
%token S_CSBRACKETS
%token W_SWITCH
%token S_DOUBLEP
%token W_CASE
%token W_BREAK
%token W_DEFAULT
%token W_ENDSWITCH
%token W_ENDIF
%token W_ENDWHILE
%token W_WHILE
%token W_DO
%token W_FOR
%token W_ENDFOR
%token W_FOREACH
%token W_ENDFOREACH
%token S_FOREACH
%token W_AS
%token S_AND
%token W_INCLUDE
%token W_CONTINUE
%token W_RETURN
%token W_FUNCTION
%token P_VARIABLE
%token DB_RECORDSET

%define parse.error verbose
%locations
%start INIT
%% 

	INIT:	START CONTENT END
		| START CONTENT END INIT
		| START error CONTENT END
		| START error CONTENT END INIT		
		| START END
		| START END INIT;

	CONTENT: PRINT
		| PRINT CONTENT 
		| COMMENT
		| COMMENT CONTENT
		| DEFINE
		| DEFINE CONTENT
		| IF
		| IF CONTENT
		| AIF
		| AIF CONTENT
		| SWITCH
		| SWITCH CONTENT
		| WHILE
		| WHILE CONTENT
		| DOWHILE
		| DOWHILE CONTENT
		| FOR
		| FOR CONTENT
		| FOREACH
		| FOREACH CONTENT
		| AFOREACH
		| AFOREACH CONTENT
		| INCLUDE
		| INCLUDE CONTENT
		| CONTINUE
		| CONTINUE CONTENT
		| RETURN
		| RETURN CONTENT
		| DFUNCTION
		| DFUNCTION CONTENT
		| CFUNCTION
		| CFUNCTION CONTENT
		| DB
		| DB CONTENT
		| error;

	CONTENTP: CONTENT
		| BREAK CONTENTP;

	PRINT: ECHO CONCATENATION S_SEMICOLON
		|C_PRINT CONCATENATION S_SEMICOLON;

	CONCATENATION: T_STRING
			| T_STRING CONCATENATION
			| T_STRING O_CONCATENATION CONCATENATION
			| S_VARIABLE IDENTIFIER
			| S_VARIABLE IDENTIFIER CONCATENATION
			| S_VARIABLE IDENTIFIER O_CONCATENATION CONCATENATION
			| S_VARIABLE IDENTIFIER O_ARITHMETIC CONCATENATION
			| T_STRING S_COMA CONCATENATION;

	COMMENT: S_COMMENT1
		| S_COMMENT2
		| MULTILINE;

	DEFINE: GLOBAL_STATIC VARIABLE
		| GLOBAL_STATIC MULTIPLES S_SEMICOLON
		| VARIABLE
		| CONSTANT;

	EQUAL: IDENTIFIER EQUALS OPERATION S_SEMICOLON;

	VARIABLE: S_VARIABLE EQUAL
		| S_VARIABLE IDENTIFIER O_INC_DEC S_SEMICOLON
		| O_INC_DEC S_VARIABLE IDENTIFIER S_SEMICOLON;

	OPERATION: S_VARIABLE IDENTIFIER 
		| S_VARIABLE IDENTIFIER OPERATION
		| TYPES
		| TYPES OPERATION
		| O_ARITHMETIC S_VARIABLE IDENTIFIER 
		| O_ARITHMETIC S_VARIABLE IDENTIFIER OPERATION
		| O_ARITHMETIC TYPES
		| O_ARITHMETIC TYPES OPERATION;

	MULTIPLES: S_VARIABLE IDENTIFIER
		| S_VARIABLE IDENTIFIER S_COMA MULTIPLES;

	CONSTANT: W_CONSTANT S_OPARENTESIS T_STRING S_COMA T_STRING S_CPARENTESIS S_SEMICOLON
		| W_CONSTANT S_OPARENTESIS T_STRING S_COMA T_STRING S_COMA T_BOOLEAN S_CPARENTESIS S_SEMICOLON
		| W_CONSTANT2 EQUAL;

	TYPES: T_INTEGER 
		| T_FLOAT 
		| T_BOOLEAN 
		| T_NULL 
		| T_STRING; 

	ESTRUCTURE: _CONDITION S_OBRACKETS CONTENTP S_CBRACKETS
		| _CONDITION S_OBRACKETS S_CBRACKETS;

	AESTRUCTURE: _CONDITION S_DOUBLEP CONTENTP
		| _CONDITION S_DOUBLEP;

	IF: W_IF ESTRUCTURE
		| W_IF ESTRUCTURE ELSEIF;

	ELSEIF: W_ELSEIF ESTRUCTURE
		| W_ELSEIF ESTRUCTURE ELSEIF
		| W_ELSE S_OBRACKETS CONTENTP S_CBRACKETS
		| W_ELSE S_OBRACKETS S_CBRACKETS;

	AIF: W_IF AESTRUCTURE W_ENDIF S_SEMICOLON
	| W_IF AESTRUCTURE AELSEIF W_ENDIF S_SEMICOLON;

	AELSEIF: W_ELSEIF AESTRUCTURE
		| W_ELSEIF AESTRUCTURE AELSEIF
		| W_ELSE S_DOUBLEP CONTENTP
		| W_ELSE S_DOUBLEP;

	CONDITION: S_VARIABLE IDENTIFIER
		| S_VARIABLE IDENTIFIER O_COMPARISON CONDITION
		| TYPES O_COMPARISON CONDITION
		| TYPES;

	_CONDITION: S_OPARENTESIS FULLCONDITION S_CPARENTESIS;

	FULLCONDITION: CONDITION
		| CONDITION O_LOGICAL FULLCONDITION
		| O_LOGICAL2 CONDITION
		| O_LOGICAL2 CONDITION O_LOGICAL FULLCONDITION;

	SWITCH: W_SWITCH S_OPARENTESIS S_VARIABLE IDENTIFIER S_CPARENTESIS S_OBRACKETS SCONTENT S_CBRACKETS
		| W_SWITCH S_OPARENTESIS S_VARIABLE IDENTIFIER S_CPARENTESIS S_DOUBLEP SCONTENT W_ENDSWITCH S_SEMICOLON;
	
	SCONTENT: W_CASE TYPES S_DOUBLEP CONTENT W_BREAK S_SEMICOLON
		| W_CASE TYPES S_DOUBLEP CONTENT W_BREAK S_SEMICOLON SCONTENT
		| W_CASE TYPES S_DOUBLEP
		| W_CASE TYPES S_DOUBLEP SCONTENT
		| W_DEFAULT S_DOUBLEP CONTENT W_BREAK S_SEMICOLON
		| W_DEFAULT S_DOUBLEP CONTENT
		| W_DEFAULT S_DOUBLEP;

	WHILE: W_WHILE _CONDITION S_OBRACKETS CONTENTP S_CBRACKETS
		| W_WHILE _CONDITION S_DOUBLEP CONTENTP W_ENDWHILE S_SEMICOLON
		| W_WHILE _CONDITION S_OBRACKETS S_CBRACKETS
		| W_WHILE _CONDITION S_DOUBLEP W_ENDWHILE S_SEMICOLON;

	DOWHILE: W_DO S_OBRACKETS CONTENTP S_CBRACKETS W_WHILE _CONDITION S_SEMICOLON
		| W_DO S_OBRACKETS S_CBRACKETS W_WHILE _CONDITION S_SEMICOLON;

	FOR: W_FOR ESTRUCTUREFOR S_OBRACKETS CONTENTP S_CBRACKETS
		| W_FOR ESTRUCTUREFOR S_DOUBLEP CONTENTP W_ENDFOR S_SEMICOLON
		| W_FOR ESTRUCTUREFOR S_OBRACKETS S_CBRACKETS
		| W_FOR ESTRUCTUREFOR S_DOUBLEP W_ENDFOR S_SEMICOLON; 

	ESTRUCTUREFOR: S_OPARENTESIS S_VARIABLE IDENTIFIER EQUALS T_INTEGER S_SEMICOLON S_VARIABLE IDENTIFIER O_COMPARISON T_INTEGER 
			S_SEMICOLON S_VARIABLE IDENTIFIER O_INC_DEC S_CPARENTESIS;

	FOREACH: W_FOREACH ESTRUCTUREFOREACH S_OBRACKETS CONTENTP S_CBRACKETS
		| W_FOREACH ESTRUCTUREFOREACH S_OBRACKETS S_CBRACKETS;


	AFOREACH: W_FOREACH ESTRUCTUREFOREACH S_DOUBLEP CONTENTP W_ENDFOREACH S_SEMICOLON
		| W_FOREACH ESTRUCTUREFOREACH S_DOUBLEP W_ENDFOREACH S_SEMICOLON;

	ESTRUCTUREFOREACH: S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_VARIABLE IDENTIFIER S_CPARENTESIS
			| S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_AND S_VARIABLE IDENTIFIER S_CPARENTESIS
			| S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_VARIABLE IDENTIFIER S_FOREACH S_VARIABLE IDENTIFIER S_CPARENTESIS;

	BREAK: W_BREAK S_SEMICOLON;

	INCLUDE: W_INCLUDE T_STRING S_SEMICOLON
		| W_INCLUDE S_VARIABLE IDENTIFIER S_SEMICOLON
		| W_INCLUDE S_OPARENTESIS T_STRING S_CPARENTESIS S_SEMICOLON
		| W_INCLUDE S_OPARENTESIS S_VARIABLE IDENTIFIER S_CPARENTESIS S_SEMICOLON;

	CONTINUE: W_CONTINUE S_SEMICOLON
		| W_CONTINUE T_INTEGER S_SEMICOLON;

	RETURN: W_RETURN S_SEMICOLON
		| W_RETURN TYPES S_SEMICOLON
		| W_RETURN S_VARIABLE IDENTIFIER S_SEMICOLON;

	DFUNCTION: W_FUNCTION ESTRUCTUREFUNC S_OBRACKETS CONTENTP S_CBRACKETS
		| W_FUNCTION ESTRUCTUREFUNC S_OBRACKETS S_CBRACKETS;

	CFUNCTION: IDENTIFIER S_OPARENTESIS PARAMETERSP S_CPARENTESIS S_SEMICOLON
		| IDENTIFIER S_OPARENTESIS S_CPARENTESIS S_SEMICOLON;

	ESTRUCTUREFUNC: IDENTIFIER S_OPARENTESIS PARAMETERS S_CPARENTESIS
		| IDENTIFIER S_OPARENTESIS S_CPARENTESIS;

	PARAMETERS: S_VARIABLE IDENTIFIER
		| S_VARIABLE IDENTIFIER S_COMA PARAMETERS
		| S_VARIABLE IDENTIFIER EQUALS TYPES 
		| S_VARIABLE IDENTIFIER EQUALS S_COMA PARAMETERS;

	PARAMETERSP: S_VARIABLE IDENTIFIER
		| S_VARIABLE IDENTIFIER S_COMA PARAMETERSP
		| TYPES
		| TYPES S_COMA PARAMETERSP;

	DB: S_VARIABLE DB_RECORDSET S_OSBRACKETS T_STRING S_CSBRACKETS;
%%

int main()
{
	if(yyparse()==0)
	printf("\nAnalisis concluido.\n");
}
void yyerror(const char* mensaje)
{
	extern int yylineno;
	extern char yytext[];
	printf("\nMensaje: %s Line: %d Text: %s\n",mensaje, yylineno, yytext);

	FILE *fp;
	fp = fopen("errors.out", "a");
	fprintf(fp, "Message: %s Line: %d Text: %s\n",mensaje, yylineno, yytext);
	fclose(fp);
}
