%{
	#include<stdio.h>
	#include<stdlib.h>
	int yylex();
	void yyerror(const char *s);
%}

%token START
%token END
%token S_COMMENT1
%token S_COMMENT2
%token MULTILINE
%token S_VARIABLE
%token S_UNDERSCORE
%token S_SEMICOLON
%token O_CONCATENATION
%token O_CONCATENATIONA
%token W_RESERVED
%token O_ARITHMETIC
%token O_COMPARISON
%token O_ASSIGNMENT
%token O_INC_DEC
%token O_LOGICAL
%token T_INTEGER
%token T_FLOAT
%token T_STRING
%token IDENTIFIER
%token S_QUOTES
%token T_BOOLEAN
%token T_NULL
%token ECHO
%token EQUALS
%token GLOBAL_STATIC
%token S_COMA
%token C_PRINT
%token W_CONSTANT
%token W_CONSTANT2
%token S_OPARENTESIS
%token S_CPARENTESIS
%token W_IF
%token W_ELSEIF
%token W_ELSE
%token S_OBRACKETS
%token S_CBRACKETS
%token W_SWITCH
%token S_DOUBLEP
%token W_CASE
%token W_BREAK
%token W_DEFAULT
%token W_ENDSWITCH
%token W_ENDIF
%token W_ENDWHILE
%token W_WHILE
%token W_DO
%token W_FOR
%token W_ENDFOR
%token W_FOREACH
%token W_ENDFOREACH
%token S_FOREACH
%token W_AS
%token S_AND

%define parse.error verbose
%locations
%start INIT
%% 

	INIT:	START CONTENT END;

	CONTENT: PRINT
		| PRINT CONTENT 
		| COMMENT
		| COMMENT CONTENT
		| DEFINE
		| DEFINE CONTENT
		| IF
		| IF CONTENT
		| AIF
		| AIF CONTENT
		| SWITCH
		| SWITCH CONTENT
		| WHILE
		| WHILE CONTENT
		| DOWHILE
		| DOWHILE CONTENT
		| FOR
		| FOR CONTENT
		| FOREACH
		| FOREACH CONTENT
		| AFOREACH
		| AFOREACH CONTENT;

	PRINT: ECHO CONCATENATION S_SEMICOLON
		|C_PRINT CONCATENATION S_SEMICOLON;

	CONCATENATION: T_STRING
			| T_STRING CONCATENATION
			| T_STRING O_CONCATENATION CONCATENATION
			| S_VARIABLE IDENTIFIER
			| S_VARIABLE IDENTIFIER CONCATENATION
			| S_VARIABLE IDENTIFIER O_CONCATENATION CONCATENATION
			| S_VARIABLE IDENTIFIER O_ARITHMETIC CONCATENATION
			| T_STRING S_COMA CONCATENATION;

	COMMENT: S_COMMENT1
		| S_COMMENT2
		| MULTILINE;

	DEFINE: GLOBAL_STATIC VARIABLE
		| GLOBAL_STATIC MULTIPLES S_SEMICOLON
		| VARIABLE
		| CONSTANT;

	EQUAL: IDENTIFIER EQUALS OPERATION S_SEMICOLON;

	VARIABLE: S_VARIABLE EQUAL
		| S_VARIABLE IDENTIFIER O_INC_DEC S_SEMICOLON
		| O_INC_DEC S_VARIABLE IDENTIFIER S_SEMICOLON;

	OPERATION: S_VARIABLE IDENTIFIER 
		| S_VARIABLE IDENTIFIER OPERATION
		| TYPES
		| TYPES OPERATION
		| O_ARITHMETIC S_VARIABLE IDENTIFIER 
		| O_ARITHMETIC S_VARIABLE IDENTIFIER OPERATION
		| O_ARITHMETIC TYPES
		| O_ARITHMETIC TYPES OPERATION;

	MULTIPLES: S_VARIABLE IDENTIFIER
		| S_VARIABLE IDENTIFIER S_COMA MULTIPLES;

	CONSTANT: W_CONSTANT S_OPARENTESIS T_STRING S_COMA T_STRING S_CPARENTESIS S_SEMICOLON
		| W_CONSTANT S_OPARENTESIS T_STRING S_COMA T_STRING S_COMA T_BOOLEAN S_CPARENTESIS S_SEMICOLON
		| W_CONSTANT2 EQUAL
		| W_CONSTANT S_OPARENTESIS T_STRING S_COMA T_STRING;

	TYPES: T_INTEGER 
		| T_FLOAT 
		| T_BOOLEAN 
		| T_NULL 
		| T_STRING; 

	IF: W_IF S_OPARENTESIS CONDITION S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS
	| W_IF S_OPARENTESIS CONDITION S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS ELSEIF;

	ELSEIF: W_ELSEIF S_OPARENTESIS CONDITION S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS
		| W_ELSEIF S_OPARENTESIS CONDITION S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS ELSEIF
		| W_ELSE S_OBRACKETS CONTENT S_CBRACKETS

	AIF: W_IF S_OPARENTESIS CONDITION S_CPARENTESIS S_DOUBLEP CONTENT W_ENDIF S_SEMICOLON
	| W_IF S_OPARENTESIS CONDITION S_CPARENTESIS S_DOUBLEP CONTENT AELSEIF W_ENDIF S_SEMICOLON;

	AELSEIF: W_ELSEIF S_OPARENTESIS CONDITION S_CPARENTESIS S_DOUBLEP CONTENT 
		| W_ELSEIF S_OPARENTESIS CONDITION S_CPARENTESIS S_DOUBLEP CONTENT AELSEIF
		| W_ELSE S_DOUBLEP CONTENT;

	CONDITION: S_VARIABLE IDENTIFIER
		| S_VARIABLE IDENTIFIER O_COMPARISON CONDITION
		| TYPES O_COMPARISON CONDITION
		| TYPES;

	SWITCH: W_SWITCH S_OPARENTESIS S_VARIABLE IDENTIFIER S_CPARENTESIS S_OBRACKETS SCONTENT S_CBRACKETS
		| W_SWITCH S_OPARENTESIS S_VARIABLE IDENTIFIER S_CPARENTESIS S_DOUBLEP SCONTENT W_ENDSWITCH S_SEMICOLON;
	
	SCONTENT: W_CASE TYPES S_DOUBLEP CONTENT W_BREAK S_SEMICOLON
		| W_CASE TYPES S_DOUBLEP CONTENT W_BREAK S_SEMICOLON SCONTENT
		| W_CASE TYPES S_DOUBLEP
		| W_CASE TYPES S_DOUBLEP SCONTENT
		| W_DEFAULT S_DOUBLEP CONTENT W_BREAK S_SEMICOLON
		| W_DEFAULT S_DOUBLEP CONTENT
		| W_DEFAULT S_DOUBLEP;

	WHILE: W_WHILE S_OPARENTESIS CONDITION S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS
		| W_WHILE S_OPARENTESIS CONDITION S_CPARENTESIS S_DOUBLEP CONTENT W_ENDWHILE S_SEMICOLON;

	DOWHILE: W_DO S_OBRACKETS CONTENT S_CBRACKETS W_WHILE S_OPARENTESIS CONDITION S_CPARENTESIS S_SEMICOLON;

	FOR: W_FOR S_OPARENTESIS S_VARIABLE IDENTIFIER EQUALS T_INTEGER S_SEMICOLON S_VARIABLE IDENTIFIER O_COMPARISON T_INTEGER 
			S_SEMICOLON S_VARIABLE IDENTIFIER O_INC_DEC S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS
		| W_FOR S_OPARENTESIS S_VARIABLE IDENTIFIER EQUALS T_INTEGER S_SEMICOLON S_VARIABLE IDENTIFIER O_COMPARISON T_INTEGER
			S_SEMICOLON S_VARIABLE IDENTIFIER O_INC_DEC S_CPARENTESIS S_DOUBLEP CONTENT W_ENDFOR S_SEMICOLON; 

	FOREACH: W_FOREACH S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_VARIABLE IDENTIFIER S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS
		| W_FOREACH S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_AND S_VARIABLE IDENTIFIER S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS
		| W_FOREACH S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_VARIABLE IDENTIFIER S_FOREACH S_VARIABLE IDENTIFIER S_CPARENTESIS S_OBRACKETS CONTENT S_CBRACKETS;

	AFOREACH: W_FOREACH S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_VARIABLE IDENTIFIER S_CPARENTESIS S_DOUBLEP CONTENT W_ENDFOREACH S_SEMICOLON
		| W_FOREACH S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_AND S_VARIABLE IDENTIFIER S_CPARENTESIS S_DOUBLEP CONTENT W_ENDFOREACH S_SEMICOLON
		| W_FOREACH S_OPARENTESIS S_VARIABLE IDENTIFIER W_AS S_VARIABLE IDENTIFIER S_FOREACH S_VARIABLE IDENTIFIER S_CPARENTESIS S_DOUBLEP CONTENT W_ENDFOREACH S_SEMICOLON

%%

int main()
{
	if(yyparse()==0)
	printf("\nAnalisis concluido sin errores\n");
}
void yyerror(const char* mensaje)
{
	extern int yylineno;
	yylineno=yylineno-1;
	printf("\nAnalisis suspendido");
	printf("\nMensaje: %s Line: %d\n",mensaje, yylineno);
}
